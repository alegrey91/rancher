package tokens

import (
	"github.com/rancher/wrangler/v3/pkg/schemes"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/kube-openapi/pkg/common"
	"k8s.io/kube-openapi/pkg/validation/spec"
)

var (
	RancherTokenName = "ranchertokens"
)

var SchemeGroupVersion = schema.GroupVersion{Group: "ext.cattle.io", Version: "v1alpha1"}
var TokenAPIResource = metav1.APIResource{
	Name:         "ranchertokens",
	SingularName: "ranchertoken",
	Namespaced:   false,
	Kind:         "RancherToken",
	Verbs: metav1.Verbs{
		"create",
		"update",
		"patch",
		"get",
		"list",
		"watch",
		"delete",
	},
}

func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

var (
	SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes)
	AddToScheme   = SchemeBuilder.AddToScheme
)

func addKnownTypes(scheme *runtime.Scheme) error {
	scheme.AddKnownTypes(SchemeGroupVersion,
		&RancherToken{},
		&RancherTokenList{},
	)
	metav1.AddToGroupVersion(scheme, SchemeGroupVersion)
	return nil
}

var _ runtime.Object = (*RancherToken)(nil)

func (in *RancherToken) DeepCopyInto(out *RancherToken) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Spec = in.Spec
	out.Status = in.Status
}

func (in *RancherToken) DeepCopy() *RancherToken {
	if in == nil {
		return nil
	}
	out := new(RancherToken)
	in.DeepCopyInto(out)
	return out
}

func (r *RancherToken) DeepCopyObject() runtime.Object {
	if c := r.DeepCopy(); c != nil {
		return c
	}
	return nil
}

type RancherTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []RancherToken `json:"items"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RancherTokenList) DeepCopyInto(out *RancherTokenList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RancherToken, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TokenList.
func (in *RancherTokenList) DeepCopy() *RancherTokenList {
	if in == nil {
		return nil
	}
	out := new(RancherTokenList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RancherTokenList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func init() {
	schemes.Register(AddToScheme)
}

// This would be autogenerated from Go struct
func GetDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/rancher/rancher/pkg/ext/resources/tokens.RancherTokenSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Rancher token",
					Type:        []string{"object"},
					Properties: map[string]spec.Schema{
						"userID": {
							SchemaProps: spec.SchemaProps{
								Description: "The ID of the user",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterName": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the cluster",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enabled": {
							SchemaProps: spec.SchemaProps{
								Description: "If token is enabled or not",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ttl": {
							SchemaProps: spec.SchemaProps{
								Description: "",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
		},
		"github.com/rancher/rancher/pkg/ext/resources/tokens.RancherToken": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Rancher token",
					Type:        []string{"object"},
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Default: map[string]interface{}{},
								Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Default: map[string]interface{}{},
								Ref:     ref("github.com/rancher/rancher/pkg/ext/resources/tokens.RancherTokenSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{"github.com/rancher/rancher/pkg/ext/resources/tokens.RancherTokenSpec"},
		},
		"github.com/rancher/rancher/pkg/ext/resources/tokens.RancherTokenList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Rancher token list",
					Type:        []string{"object"},
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Default: map[string]interface{}{},
								Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Default: map[string]interface{}{},
											Ref:     ref("github.com/rancher/rancher/pkg/ext/resources/tokens.RancherToken"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{"github.com/rancher/rancher/pkg/ext/resources/tokens.RancherToken"},
		},
	}
}
