// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"sync"
	v31 "github.com/rancher/rancher/pkg/generated/norman/management.cattle.io/v3"
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ v31.Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
//	func TestSomethingThatUsesInterface(t *testing.T) {
//
//		// make and configure a mocked Interface
//		mockedInterface := &InterfaceMock{
//			AuthConfigsFunc: func(namespace string) AuthConfigInterface {
//				panic("mock out the AuthConfigs method")
//			},
//			CatalogTemplateVersionsFunc: func(namespace string) CatalogTemplateVersionInterface {
//				panic("mock out the CatalogTemplateVersions method")
//			},
//			CatalogTemplatesFunc: func(namespace string) CatalogTemplateInterface {
//				panic("mock out the CatalogTemplates method")
//			},
//			CatalogsFunc: func(namespace string) CatalogInterface {
//				panic("mock out the Catalogs method")
//			},
//			CloudCredentialsFunc: func(namespace string) CloudCredentialInterface {
//				panic("mock out the CloudCredentials method")
//			},
//			ClusterCatalogsFunc: func(namespace string) ClusterCatalogInterface {
//				panic("mock out the ClusterCatalogs method")
//			},
//			ClusterRegistrationTokensFunc: func(namespace string) ClusterRegistrationTokenInterface {
//				panic("mock out the ClusterRegistrationTokens method")
//			},
//			ClusterRoleTemplateBindingsFunc: func(namespace string) ClusterRoleTemplateBindingInterface {
//				panic("mock out the ClusterRoleTemplateBindings method")
//			},
//			ClusterTemplateRevisionsFunc: func(namespace string) ClusterTemplateRevisionInterface {
//				panic("mock out the ClusterTemplateRevisions method")
//			},
//			ClusterTemplatesFunc: func(namespace string) ClusterTemplateInterface {
//				panic("mock out the ClusterTemplates method")
//			},
//			ClustersFunc: func(namespace string) ClusterInterface {
//				panic("mock out the Clusters method")
//			},
//			ComposeConfigsFunc: func(namespace string) ComposeConfigInterface {
//				panic("mock out the ComposeConfigs method")
//			},
//			DynamicSchemasFunc: func(namespace string) DynamicSchemaInterface {
//				panic("mock out the DynamicSchemas method")
//			},
//			EtcdBackupsFunc: func(namespace string) EtcdBackupInterface {
//				panic("mock out the EtcdBackups method")
//			},
//			FeaturesFunc: func(namespace string) FeatureInterface {
//				panic("mock out the Features method")
//			},
//			FleetWorkspacesFunc: func(namespace string) FleetWorkspaceInterface {
//				panic("mock out the FleetWorkspaces method")
//			},
//			GlobalDnsProvidersFunc: func(namespace string) GlobalDnsProviderInterface {
//				panic("mock out the GlobalDnsProviders method")
//			},
//			GlobalDnsesFunc: func(namespace string) GlobalDnsInterface {
//				panic("mock out the GlobalDnses method")
//			},
//			GlobalRoleBindingsFunc: func(namespace string) GlobalRoleBindingInterface {
//				panic("mock out the GlobalRoleBindings method")
//			},
//			GlobalRolesFunc: func(namespace string) GlobalRoleInterface {
//				panic("mock out the GlobalRoles method")
//			},
//			GroupMembersFunc: func(namespace string) GroupMemberInterface {
//				panic("mock out the GroupMembers method")
//			},
//			GroupsFunc: func(namespace string) GroupInterface {
//				panic("mock out the Groups method")
//			},
//			KontainerDriversFunc: func(namespace string) KontainerDriverInterface {
//				panic("mock out the KontainerDrivers method")
//			},
//			LdapConfigsFunc: func(namespace string) LdapConfigInterface {
//				panic("mock out the LdapConfigs method")
//			},
//			MultiClusterAppRevisionsFunc: func(namespace string) MultiClusterAppRevisionInterface {
//				panic("mock out the MultiClusterAppRevisions method")
//			},
//			MultiClusterAppsFunc: func(namespace string) MultiClusterAppInterface {
//				panic("mock out the MultiClusterApps method")
//			},
//			NodeDriversFunc: func(namespace string) NodeDriverInterface {
//				panic("mock out the NodeDrivers method")
//			},
//			NodePoolsFunc: func(namespace string) NodePoolInterface {
//				panic("mock out the NodePools method")
//			},
//			NodeTemplatesFunc: func(namespace string) NodeTemplateInterface {
//				panic("mock out the NodeTemplates method")
//			},
//			NodesFunc: func(namespace string) NodeInterface {
//				panic("mock out the Nodes method")
//			},
//			PodSecurityAdmissionConfigurationTemplatesFunc: func(namespace string) PodSecurityAdmissionConfigurationTemplateInterface {
//				panic("mock out the PodSecurityAdmissionConfigurationTemplates method")
//			},
//			PreferencesFunc: func(namespace string) PreferenceInterface {
//				panic("mock out the Preferences method")
//			},
//			PrincipalsFunc: func(namespace string) PrincipalInterface {
//				panic("mock out the Principals method")
//			},
//			ProjectCatalogsFunc: func(namespace string) ProjectCatalogInterface {
//				panic("mock out the ProjectCatalogs method")
//			},
//			ProjectNetworkPoliciesFunc: func(namespace string) ProjectNetworkPolicyInterface {
//				panic("mock out the ProjectNetworkPolicies method")
//			},
//			ProjectRoleTemplateBindingsFunc: func(namespace string) ProjectRoleTemplateBindingInterface {
//				panic("mock out the ProjectRoleTemplateBindings method")
//			},
//			ProjectsFunc: func(namespace string) ProjectInterface {
//				panic("mock out the Projects method")
//			},
//			RancherUserNotificationsFunc: func(namespace string) RancherUserNotificationInterface {
//				panic("mock out the RancherUserNotifications method")
//			},
//			RkeAddonsFunc: func(namespace string) RkeAddonInterface {
//				panic("mock out the RkeAddons method")
//			},
//			RkeK8sServiceOptionsFunc: func(namespace string) RkeK8sServiceOptionInterface {
//				panic("mock out the RkeK8sServiceOptions method")
//			},
//			RkeK8sSystemImagesFunc: func(namespace string) RkeK8sSystemImageInterface {
//				panic("mock out the RkeK8sSystemImages method")
//			},
//			RoleTemplatesFunc: func(namespace string) RoleTemplateInterface {
//				panic("mock out the RoleTemplates method")
//			},
//			SamlTokensFunc: func(namespace string) SamlTokenInterface {
//				panic("mock out the SamlTokens method")
//			},
//			SettingsFunc: func(namespace string) SettingInterface {
//				panic("mock out the Settings method")
//			},
//			TemplateContentsFunc: func(namespace string) TemplateContentInterface {
//				panic("mock out the TemplateContents method")
//			},
//			TemplateVersionsFunc: func(namespace string) TemplateVersionInterface {
//				panic("mock out the TemplateVersions method")
//			},
//			TemplatesFunc: func(namespace string) TemplateInterface {
//				panic("mock out the Templates method")
//			},
//			TokensFunc: func(namespace string) TokenInterface {
//				panic("mock out the Tokens method")
//			},
//			UserAttributesFunc: func(namespace string) UserAttributeInterface {
//				panic("mock out the UserAttributes method")
//			},
//			UsersFunc: func(namespace string) UserInterface {
//				panic("mock out the Users method")
//			},
//		}
//
//		// use mockedInterface in code that requires Interface
//		// and then make assertions.
//
//	}
type InterfaceMock struct {
	// AuthConfigsFunc mocks the AuthConfigs method.
	AuthConfigsFunc func(namespace string) v31.AuthConfigInterface

	// CatalogTemplateVersionsFunc mocks the CatalogTemplateVersions method.
	CatalogTemplateVersionsFunc func(namespace string) v31.CatalogTemplateVersionInterface

	// CatalogTemplatesFunc mocks the CatalogTemplates method.
	CatalogTemplatesFunc func(namespace string) v31.CatalogTemplateInterface

	// CatalogsFunc mocks the Catalogs method.
	CatalogsFunc func(namespace string) v31.CatalogInterface

	// CloudCredentialsFunc mocks the CloudCredentials method.
	CloudCredentialsFunc func(namespace string) v31.CloudCredentialInterface

	// ClusterCatalogsFunc mocks the ClusterCatalogs method.
	ClusterCatalogsFunc func(namespace string) v31.ClusterCatalogInterface

	// ClusterRegistrationTokensFunc mocks the ClusterRegistrationTokens method.
	ClusterRegistrationTokensFunc func(namespace string) v31.ClusterRegistrationTokenInterface

	// ClusterRoleTemplateBindingsFunc mocks the ClusterRoleTemplateBindings method.
	ClusterRoleTemplateBindingsFunc func(namespace string) v31.ClusterRoleTemplateBindingInterface

	// ClusterTemplateRevisionsFunc mocks the ClusterTemplateRevisions method.
	ClusterTemplateRevisionsFunc func(namespace string) v31.ClusterTemplateRevisionInterface

	// ClusterTemplatesFunc mocks the ClusterTemplates method.
	ClusterTemplatesFunc func(namespace string) v31.ClusterTemplateInterface

	// ClustersFunc mocks the Clusters method.
	ClustersFunc func(namespace string) v31.ClusterInterface

	// ComposeConfigsFunc mocks the ComposeConfigs method.
	ComposeConfigsFunc func(namespace string) v31.ComposeConfigInterface

	// DynamicSchemasFunc mocks the DynamicSchemas method.
	DynamicSchemasFunc func(namespace string) v31.DynamicSchemaInterface

	// EtcdBackupsFunc mocks the EtcdBackups method.
	EtcdBackupsFunc func(namespace string) v31.EtcdBackupInterface

	// FeaturesFunc mocks the Features method.
	FeaturesFunc func(namespace string) v31.FeatureInterface

	// FleetWorkspacesFunc mocks the FleetWorkspaces method.
	FleetWorkspacesFunc func(namespace string) v31.FleetWorkspaceInterface

	// GlobalDnsProvidersFunc mocks the GlobalDnsProviders method.
	GlobalDnsProvidersFunc func(namespace string) v31.GlobalDnsProviderInterface

	// GlobalDnsesFunc mocks the GlobalDnses method.
	GlobalDnsesFunc func(namespace string) v31.GlobalDnsInterface

	// GlobalRoleBindingsFunc mocks the GlobalRoleBindings method.
	GlobalRoleBindingsFunc func(namespace string) v31.GlobalRoleBindingInterface

	// GlobalRolesFunc mocks the GlobalRoles method.
	GlobalRolesFunc func(namespace string) v31.GlobalRoleInterface

	// GroupMembersFunc mocks the GroupMembers method.
	GroupMembersFunc func(namespace string) v31.GroupMemberInterface

	// GroupsFunc mocks the Groups method.
	GroupsFunc func(namespace string) v31.GroupInterface

	// KontainerDriversFunc mocks the KontainerDrivers method.
	KontainerDriversFunc func(namespace string) v31.KontainerDriverInterface

	// LdapConfigsFunc mocks the LdapConfigs method.
	LdapConfigsFunc func(namespace string) v31.LdapConfigInterface

	// MultiClusterAppRevisionsFunc mocks the MultiClusterAppRevisions method.
	MultiClusterAppRevisionsFunc func(namespace string) v31.MultiClusterAppRevisionInterface

	// MultiClusterAppsFunc mocks the MultiClusterApps method.
	MultiClusterAppsFunc func(namespace string) v31.MultiClusterAppInterface

	// NodeDriversFunc mocks the NodeDrivers method.
	NodeDriversFunc func(namespace string) v31.NodeDriverInterface

	// NodePoolsFunc mocks the NodePools method.
	NodePoolsFunc func(namespace string) v31.NodePoolInterface

	// NodeTemplatesFunc mocks the NodeTemplates method.
	NodeTemplatesFunc func(namespace string) v31.NodeTemplateInterface

	// NodesFunc mocks the Nodes method.
	NodesFunc func(namespace string) v31.NodeInterface

	// PodSecurityAdmissionConfigurationTemplatesFunc mocks the PodSecurityAdmissionConfigurationTemplates method.
	PodSecurityAdmissionConfigurationTemplatesFunc func(namespace string) v31.PodSecurityAdmissionConfigurationTemplateInterface

	// PreferencesFunc mocks the Preferences method.
	PreferencesFunc func(namespace string) v31.PreferenceInterface

	// PrincipalsFunc mocks the Principals method.
	PrincipalsFunc func(namespace string) v31.PrincipalInterface

	// ProjectCatalogsFunc mocks the ProjectCatalogs method.
	ProjectCatalogsFunc func(namespace string) v31.ProjectCatalogInterface

	// ProjectNetworkPoliciesFunc mocks the ProjectNetworkPolicies method.
	ProjectNetworkPoliciesFunc func(namespace string) v31.ProjectNetworkPolicyInterface

	// ProjectRoleTemplateBindingsFunc mocks the ProjectRoleTemplateBindings method.
	ProjectRoleTemplateBindingsFunc func(namespace string) v31.ProjectRoleTemplateBindingInterface

	// ProjectsFunc mocks the Projects method.
	ProjectsFunc func(namespace string) v31.ProjectInterface

	// RancherUserNotificationsFunc mocks the RancherUserNotifications method.
	RancherUserNotificationsFunc func(namespace string) v31.RancherUserNotificationInterface

	// RkeAddonsFunc mocks the RkeAddons method.
	RkeAddonsFunc func(namespace string) v31.RkeAddonInterface

	// RkeK8sServiceOptionsFunc mocks the RkeK8sServiceOptions method.
	RkeK8sServiceOptionsFunc func(namespace string) v31.RkeK8sServiceOptionInterface

	// RkeK8sSystemImagesFunc mocks the RkeK8sSystemImages method.
	RkeK8sSystemImagesFunc func(namespace string) v31.RkeK8sSystemImageInterface

	// RoleTemplatesFunc mocks the RoleTemplates method.
	RoleTemplatesFunc func(namespace string) v31.RoleTemplateInterface

	// SamlTokensFunc mocks the SamlTokens method.
	SamlTokensFunc func(namespace string) v31.SamlTokenInterface

	// SettingsFunc mocks the Settings method.
	SettingsFunc func(namespace string) v31.SettingInterface

	// TemplateContentsFunc mocks the TemplateContents method.
	TemplateContentsFunc func(namespace string) v31.TemplateContentInterface

	// TemplateVersionsFunc mocks the TemplateVersions method.
	TemplateVersionsFunc func(namespace string) v31.TemplateVersionInterface

	// TemplatesFunc mocks the Templates method.
	TemplatesFunc func(namespace string) v31.TemplateInterface

	// TokensFunc mocks the Tokens method.
	TokensFunc func(namespace string) v31.TokenInterface

	// UserAttributesFunc mocks the UserAttributes method.
	UserAttributesFunc func(namespace string) v31.UserAttributeInterface

	// UsersFunc mocks the Users method.
	UsersFunc func(namespace string) v31.UserInterface

	// calls tracks calls to the methods.
	calls struct {
		// AuthConfigs holds details about calls to the AuthConfigs method.
		AuthConfigs []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// CatalogTemplateVersions holds details about calls to the CatalogTemplateVersions method.
		CatalogTemplateVersions []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// CatalogTemplates holds details about calls to the CatalogTemplates method.
		CatalogTemplates []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Catalogs holds details about calls to the Catalogs method.
		Catalogs []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// CloudCredentials holds details about calls to the CloudCredentials method.
		CloudCredentials []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// ClusterCatalogs holds details about calls to the ClusterCatalogs method.
		ClusterCatalogs []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// ClusterRegistrationTokens holds details about calls to the ClusterRegistrationTokens method.
		ClusterRegistrationTokens []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// ClusterRoleTemplateBindings holds details about calls to the ClusterRoleTemplateBindings method.
		ClusterRoleTemplateBindings []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// ClusterTemplateRevisions holds details about calls to the ClusterTemplateRevisions method.
		ClusterTemplateRevisions []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// ClusterTemplates holds details about calls to the ClusterTemplates method.
		ClusterTemplates []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Clusters holds details about calls to the Clusters method.
		Clusters []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// ComposeConfigs holds details about calls to the ComposeConfigs method.
		ComposeConfigs []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// DynamicSchemas holds details about calls to the DynamicSchemas method.
		DynamicSchemas []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// EtcdBackups holds details about calls to the EtcdBackups method.
		EtcdBackups []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Features holds details about calls to the Features method.
		Features []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// FleetWorkspaces holds details about calls to the FleetWorkspaces method.
		FleetWorkspaces []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// GlobalDnsProviders holds details about calls to the GlobalDnsProviders method.
		GlobalDnsProviders []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// GlobalDnses holds details about calls to the GlobalDnses method.
		GlobalDnses []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// GlobalRoleBindings holds details about calls to the GlobalRoleBindings method.
		GlobalRoleBindings []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// GlobalRoles holds details about calls to the GlobalRoles method.
		GlobalRoles []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// GroupMembers holds details about calls to the GroupMembers method.
		GroupMembers []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Groups holds details about calls to the Groups method.
		Groups []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// KontainerDrivers holds details about calls to the KontainerDrivers method.
		KontainerDrivers []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// LdapConfigs holds details about calls to the LdapConfigs method.
		LdapConfigs []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// MultiClusterAppRevisions holds details about calls to the MultiClusterAppRevisions method.
		MultiClusterAppRevisions []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// MultiClusterApps holds details about calls to the MultiClusterApps method.
		MultiClusterApps []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// NodeDrivers holds details about calls to the NodeDrivers method.
		NodeDrivers []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// NodePools holds details about calls to the NodePools method.
		NodePools []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// NodeTemplates holds details about calls to the NodeTemplates method.
		NodeTemplates []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Nodes holds details about calls to the Nodes method.
		Nodes []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// PodSecurityAdmissionConfigurationTemplates holds details about calls to the PodSecurityAdmissionConfigurationTemplates method.
		PodSecurityAdmissionConfigurationTemplates []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Preferences holds details about calls to the Preferences method.
		Preferences []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Principals holds details about calls to the Principals method.
		Principals []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// ProjectCatalogs holds details about calls to the ProjectCatalogs method.
		ProjectCatalogs []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// ProjectNetworkPolicies holds details about calls to the ProjectNetworkPolicies method.
		ProjectNetworkPolicies []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// ProjectRoleTemplateBindings holds details about calls to the ProjectRoleTemplateBindings method.
		ProjectRoleTemplateBindings []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Projects holds details about calls to the Projects method.
		Projects []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// RancherUserNotifications holds details about calls to the RancherUserNotifications method.
		RancherUserNotifications []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// RkeAddons holds details about calls to the RkeAddons method.
		RkeAddons []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// RkeK8sServiceOptions holds details about calls to the RkeK8sServiceOptions method.
		RkeK8sServiceOptions []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// RkeK8sSystemImages holds details about calls to the RkeK8sSystemImages method.
		RkeK8sSystemImages []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// RoleTemplates holds details about calls to the RoleTemplates method.
		RoleTemplates []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// SamlTokens holds details about calls to the SamlTokens method.
		SamlTokens []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Settings holds details about calls to the Settings method.
		Settings []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// TemplateContents holds details about calls to the TemplateContents method.
		TemplateContents []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// TemplateVersions holds details about calls to the TemplateVersions method.
		TemplateVersions []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Templates holds details about calls to the Templates method.
		Templates []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Tokens holds details about calls to the Tokens method.
		Tokens []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// UserAttributes holds details about calls to the UserAttributes method.
		UserAttributes []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Users holds details about calls to the Users method.
		Users []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
	lockAuthConfigs                                sync.RWMutex
	lockCatalogTemplateVersions                    sync.RWMutex
	lockCatalogTemplates                           sync.RWMutex
	lockCatalogs                                   sync.RWMutex
	lockCloudCredentials                           sync.RWMutex
	lockClusterCatalogs                            sync.RWMutex
	lockClusterRegistrationTokens                  sync.RWMutex
	lockClusterRoleTemplateBindings                sync.RWMutex
	lockClusterTemplateRevisions                   sync.RWMutex
	lockClusterTemplates                           sync.RWMutex
	lockClusters                                   sync.RWMutex
	lockComposeConfigs                             sync.RWMutex
	lockDynamicSchemas                             sync.RWMutex
	lockEtcdBackups                                sync.RWMutex
	lockFeatures                                   sync.RWMutex
	lockFleetWorkspaces                            sync.RWMutex
	lockGlobalDnsProviders                         sync.RWMutex
	lockGlobalDnses                                sync.RWMutex
	lockGlobalRoleBindings                         sync.RWMutex
	lockGlobalRoles                                sync.RWMutex
	lockGroupMembers                               sync.RWMutex
	lockGroups                                     sync.RWMutex
	lockKontainerDrivers                           sync.RWMutex
	lockLdapConfigs                                sync.RWMutex
	lockMultiClusterAppRevisions                   sync.RWMutex
	lockMultiClusterApps                           sync.RWMutex
	lockNodeDrivers                                sync.RWMutex
	lockNodePools                                  sync.RWMutex
	lockNodeTemplates                              sync.RWMutex
	lockNodes                                      sync.RWMutex
	lockPodSecurityAdmissionConfigurationTemplates sync.RWMutex
	lockPreferences                                sync.RWMutex
	lockPrincipals                                 sync.RWMutex
	lockProjectCatalogs                            sync.RWMutex
	lockProjectNetworkPolicies                     sync.RWMutex
	lockProjectRoleTemplateBindings                sync.RWMutex
	lockProjects                                   sync.RWMutex
	lockRancherUserNotifications                   sync.RWMutex
	lockRkeAddons                                  sync.RWMutex
	lockRkeK8sServiceOptions                       sync.RWMutex
	lockRkeK8sSystemImages                         sync.RWMutex
	lockRoleTemplates                              sync.RWMutex
	lockSamlTokens                                 sync.RWMutex
	lockSettings                                   sync.RWMutex
	lockTemplateContents                           sync.RWMutex
	lockTemplateVersions                           sync.RWMutex
	lockTemplates                                  sync.RWMutex
	lockTokens                                     sync.RWMutex
	lockUserAttributes                             sync.RWMutex
	lockUsers                                      sync.RWMutex
}

// AuthConfigs calls AuthConfigsFunc.
func (mock *InterfaceMock) AuthConfigs(namespace string) v31.AuthConfigInterface {
	if mock.AuthConfigsFunc == nil {
		panic("InterfaceMock.AuthConfigsFunc: method is nil but Interface.AuthConfigs was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockAuthConfigs.Lock()
	mock.calls.AuthConfigs = append(mock.calls.AuthConfigs, callInfo)
	mock.lockAuthConfigs.Unlock()
	return mock.AuthConfigsFunc(namespace)
}

// AuthConfigsCalls gets all the calls that were made to AuthConfigs.
// Check the length with:
//
//	len(mockedInterface.AuthConfigsCalls())
func (mock *InterfaceMock) AuthConfigsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockAuthConfigs.RLock()
	calls = mock.calls.AuthConfigs
	mock.lockAuthConfigs.RUnlock()
	return calls
}

// CatalogTemplateVersions calls CatalogTemplateVersionsFunc.
func (mock *InterfaceMock) CatalogTemplateVersions(namespace string) v31.CatalogTemplateVersionInterface {
	if mock.CatalogTemplateVersionsFunc == nil {
		panic("InterfaceMock.CatalogTemplateVersionsFunc: method is nil but Interface.CatalogTemplateVersions was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockCatalogTemplateVersions.Lock()
	mock.calls.CatalogTemplateVersions = append(mock.calls.CatalogTemplateVersions, callInfo)
	mock.lockCatalogTemplateVersions.Unlock()
	return mock.CatalogTemplateVersionsFunc(namespace)
}

// CatalogTemplateVersionsCalls gets all the calls that were made to CatalogTemplateVersions.
// Check the length with:
//
//	len(mockedInterface.CatalogTemplateVersionsCalls())
func (mock *InterfaceMock) CatalogTemplateVersionsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockCatalogTemplateVersions.RLock()
	calls = mock.calls.CatalogTemplateVersions
	mock.lockCatalogTemplateVersions.RUnlock()
	return calls
}

// CatalogTemplates calls CatalogTemplatesFunc.
func (mock *InterfaceMock) CatalogTemplates(namespace string) v31.CatalogTemplateInterface {
	if mock.CatalogTemplatesFunc == nil {
		panic("InterfaceMock.CatalogTemplatesFunc: method is nil but Interface.CatalogTemplates was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockCatalogTemplates.Lock()
	mock.calls.CatalogTemplates = append(mock.calls.CatalogTemplates, callInfo)
	mock.lockCatalogTemplates.Unlock()
	return mock.CatalogTemplatesFunc(namespace)
}

// CatalogTemplatesCalls gets all the calls that were made to CatalogTemplates.
// Check the length with:
//
//	len(mockedInterface.CatalogTemplatesCalls())
func (mock *InterfaceMock) CatalogTemplatesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockCatalogTemplates.RLock()
	calls = mock.calls.CatalogTemplates
	mock.lockCatalogTemplates.RUnlock()
	return calls
}

// Catalogs calls CatalogsFunc.
func (mock *InterfaceMock) Catalogs(namespace string) v31.CatalogInterface {
	if mock.CatalogsFunc == nil {
		panic("InterfaceMock.CatalogsFunc: method is nil but Interface.Catalogs was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockCatalogs.Lock()
	mock.calls.Catalogs = append(mock.calls.Catalogs, callInfo)
	mock.lockCatalogs.Unlock()
	return mock.CatalogsFunc(namespace)
}

// CatalogsCalls gets all the calls that were made to Catalogs.
// Check the length with:
//
//	len(mockedInterface.CatalogsCalls())
func (mock *InterfaceMock) CatalogsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockCatalogs.RLock()
	calls = mock.calls.Catalogs
	mock.lockCatalogs.RUnlock()
	return calls
}

// CloudCredentials calls CloudCredentialsFunc.
func (mock *InterfaceMock) CloudCredentials(namespace string) v31.CloudCredentialInterface {
	if mock.CloudCredentialsFunc == nil {
		panic("InterfaceMock.CloudCredentialsFunc: method is nil but Interface.CloudCredentials was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockCloudCredentials.Lock()
	mock.calls.CloudCredentials = append(mock.calls.CloudCredentials, callInfo)
	mock.lockCloudCredentials.Unlock()
	return mock.CloudCredentialsFunc(namespace)
}

// CloudCredentialsCalls gets all the calls that were made to CloudCredentials.
// Check the length with:
//
//	len(mockedInterface.CloudCredentialsCalls())
func (mock *InterfaceMock) CloudCredentialsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockCloudCredentials.RLock()
	calls = mock.calls.CloudCredentials
	mock.lockCloudCredentials.RUnlock()
	return calls
}

// ClusterCatalogs calls ClusterCatalogsFunc.
func (mock *InterfaceMock) ClusterCatalogs(namespace string) v31.ClusterCatalogInterface {
	if mock.ClusterCatalogsFunc == nil {
		panic("InterfaceMock.ClusterCatalogsFunc: method is nil but Interface.ClusterCatalogs was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockClusterCatalogs.Lock()
	mock.calls.ClusterCatalogs = append(mock.calls.ClusterCatalogs, callInfo)
	mock.lockClusterCatalogs.Unlock()
	return mock.ClusterCatalogsFunc(namespace)
}

// ClusterCatalogsCalls gets all the calls that were made to ClusterCatalogs.
// Check the length with:
//
//	len(mockedInterface.ClusterCatalogsCalls())
func (mock *InterfaceMock) ClusterCatalogsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockClusterCatalogs.RLock()
	calls = mock.calls.ClusterCatalogs
	mock.lockClusterCatalogs.RUnlock()
	return calls
}

// ClusterRegistrationTokens calls ClusterRegistrationTokensFunc.
func (mock *InterfaceMock) ClusterRegistrationTokens(namespace string) v31.ClusterRegistrationTokenInterface {
	if mock.ClusterRegistrationTokensFunc == nil {
		panic("InterfaceMock.ClusterRegistrationTokensFunc: method is nil but Interface.ClusterRegistrationTokens was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockClusterRegistrationTokens.Lock()
	mock.calls.ClusterRegistrationTokens = append(mock.calls.ClusterRegistrationTokens, callInfo)
	mock.lockClusterRegistrationTokens.Unlock()
	return mock.ClusterRegistrationTokensFunc(namespace)
}

// ClusterRegistrationTokensCalls gets all the calls that were made to ClusterRegistrationTokens.
// Check the length with:
//
//	len(mockedInterface.ClusterRegistrationTokensCalls())
func (mock *InterfaceMock) ClusterRegistrationTokensCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockClusterRegistrationTokens.RLock()
	calls = mock.calls.ClusterRegistrationTokens
	mock.lockClusterRegistrationTokens.RUnlock()
	return calls
}

// ClusterRoleTemplateBindings calls ClusterRoleTemplateBindingsFunc.
func (mock *InterfaceMock) ClusterRoleTemplateBindings(namespace string) v31.ClusterRoleTemplateBindingInterface {
	if mock.ClusterRoleTemplateBindingsFunc == nil {
		panic("InterfaceMock.ClusterRoleTemplateBindingsFunc: method is nil but Interface.ClusterRoleTemplateBindings was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockClusterRoleTemplateBindings.Lock()
	mock.calls.ClusterRoleTemplateBindings = append(mock.calls.ClusterRoleTemplateBindings, callInfo)
	mock.lockClusterRoleTemplateBindings.Unlock()
	return mock.ClusterRoleTemplateBindingsFunc(namespace)
}

// ClusterRoleTemplateBindingsCalls gets all the calls that were made to ClusterRoleTemplateBindings.
// Check the length with:
//
//	len(mockedInterface.ClusterRoleTemplateBindingsCalls())
func (mock *InterfaceMock) ClusterRoleTemplateBindingsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockClusterRoleTemplateBindings.RLock()
	calls = mock.calls.ClusterRoleTemplateBindings
	mock.lockClusterRoleTemplateBindings.RUnlock()
	return calls
}

// ClusterTemplateRevisions calls ClusterTemplateRevisionsFunc.
func (mock *InterfaceMock) ClusterTemplateRevisions(namespace string) v31.ClusterTemplateRevisionInterface {
	if mock.ClusterTemplateRevisionsFunc == nil {
		panic("InterfaceMock.ClusterTemplateRevisionsFunc: method is nil but Interface.ClusterTemplateRevisions was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockClusterTemplateRevisions.Lock()
	mock.calls.ClusterTemplateRevisions = append(mock.calls.ClusterTemplateRevisions, callInfo)
	mock.lockClusterTemplateRevisions.Unlock()
	return mock.ClusterTemplateRevisionsFunc(namespace)
}

// ClusterTemplateRevisionsCalls gets all the calls that were made to ClusterTemplateRevisions.
// Check the length with:
//
//	len(mockedInterface.ClusterTemplateRevisionsCalls())
func (mock *InterfaceMock) ClusterTemplateRevisionsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockClusterTemplateRevisions.RLock()
	calls = mock.calls.ClusterTemplateRevisions
	mock.lockClusterTemplateRevisions.RUnlock()
	return calls
}

// ClusterTemplates calls ClusterTemplatesFunc.
func (mock *InterfaceMock) ClusterTemplates(namespace string) v31.ClusterTemplateInterface {
	if mock.ClusterTemplatesFunc == nil {
		panic("InterfaceMock.ClusterTemplatesFunc: method is nil but Interface.ClusterTemplates was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockClusterTemplates.Lock()
	mock.calls.ClusterTemplates = append(mock.calls.ClusterTemplates, callInfo)
	mock.lockClusterTemplates.Unlock()
	return mock.ClusterTemplatesFunc(namespace)
}

// ClusterTemplatesCalls gets all the calls that were made to ClusterTemplates.
// Check the length with:
//
//	len(mockedInterface.ClusterTemplatesCalls())
func (mock *InterfaceMock) ClusterTemplatesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockClusterTemplates.RLock()
	calls = mock.calls.ClusterTemplates
	mock.lockClusterTemplates.RUnlock()
	return calls
}

// Clusters calls ClustersFunc.
func (mock *InterfaceMock) Clusters(namespace string) v31.ClusterInterface {
	if mock.ClustersFunc == nil {
		panic("InterfaceMock.ClustersFunc: method is nil but Interface.Clusters was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockClusters.Lock()
	mock.calls.Clusters = append(mock.calls.Clusters, callInfo)
	mock.lockClusters.Unlock()
	return mock.ClustersFunc(namespace)
}

// ClustersCalls gets all the calls that were made to Clusters.
// Check the length with:
//
//	len(mockedInterface.ClustersCalls())
func (mock *InterfaceMock) ClustersCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockClusters.RLock()
	calls = mock.calls.Clusters
	mock.lockClusters.RUnlock()
	return calls
}

// ComposeConfigs calls ComposeConfigsFunc.
func (mock *InterfaceMock) ComposeConfigs(namespace string) v31.ComposeConfigInterface {
	if mock.ComposeConfigsFunc == nil {
		panic("InterfaceMock.ComposeConfigsFunc: method is nil but Interface.ComposeConfigs was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockComposeConfigs.Lock()
	mock.calls.ComposeConfigs = append(mock.calls.ComposeConfigs, callInfo)
	mock.lockComposeConfigs.Unlock()
	return mock.ComposeConfigsFunc(namespace)
}

// ComposeConfigsCalls gets all the calls that were made to ComposeConfigs.
// Check the length with:
//
//	len(mockedInterface.ComposeConfigsCalls())
func (mock *InterfaceMock) ComposeConfigsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockComposeConfigs.RLock()
	calls = mock.calls.ComposeConfigs
	mock.lockComposeConfigs.RUnlock()
	return calls
}

// DynamicSchemas calls DynamicSchemasFunc.
func (mock *InterfaceMock) DynamicSchemas(namespace string) v31.DynamicSchemaInterface {
	if mock.DynamicSchemasFunc == nil {
		panic("InterfaceMock.DynamicSchemasFunc: method is nil but Interface.DynamicSchemas was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockDynamicSchemas.Lock()
	mock.calls.DynamicSchemas = append(mock.calls.DynamicSchemas, callInfo)
	mock.lockDynamicSchemas.Unlock()
	return mock.DynamicSchemasFunc(namespace)
}

// DynamicSchemasCalls gets all the calls that were made to DynamicSchemas.
// Check the length with:
//
//	len(mockedInterface.DynamicSchemasCalls())
func (mock *InterfaceMock) DynamicSchemasCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockDynamicSchemas.RLock()
	calls = mock.calls.DynamicSchemas
	mock.lockDynamicSchemas.RUnlock()
	return calls
}

// EtcdBackups calls EtcdBackupsFunc.
func (mock *InterfaceMock) EtcdBackups(namespace string) v31.EtcdBackupInterface {
	if mock.EtcdBackupsFunc == nil {
		panic("InterfaceMock.EtcdBackupsFunc: method is nil but Interface.EtcdBackups was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockEtcdBackups.Lock()
	mock.calls.EtcdBackups = append(mock.calls.EtcdBackups, callInfo)
	mock.lockEtcdBackups.Unlock()
	return mock.EtcdBackupsFunc(namespace)
}

// EtcdBackupsCalls gets all the calls that were made to EtcdBackups.
// Check the length with:
//
//	len(mockedInterface.EtcdBackupsCalls())
func (mock *InterfaceMock) EtcdBackupsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockEtcdBackups.RLock()
	calls = mock.calls.EtcdBackups
	mock.lockEtcdBackups.RUnlock()
	return calls
}

// Features calls FeaturesFunc.
func (mock *InterfaceMock) Features(namespace string) v31.FeatureInterface {
	if mock.FeaturesFunc == nil {
		panic("InterfaceMock.FeaturesFunc: method is nil but Interface.Features was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockFeatures.Lock()
	mock.calls.Features = append(mock.calls.Features, callInfo)
	mock.lockFeatures.Unlock()
	return mock.FeaturesFunc(namespace)
}

// FeaturesCalls gets all the calls that were made to Features.
// Check the length with:
//
//	len(mockedInterface.FeaturesCalls())
func (mock *InterfaceMock) FeaturesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockFeatures.RLock()
	calls = mock.calls.Features
	mock.lockFeatures.RUnlock()
	return calls
}

// FleetWorkspaces calls FleetWorkspacesFunc.
func (mock *InterfaceMock) FleetWorkspaces(namespace string) v31.FleetWorkspaceInterface {
	if mock.FleetWorkspacesFunc == nil {
		panic("InterfaceMock.FleetWorkspacesFunc: method is nil but Interface.FleetWorkspaces was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockFleetWorkspaces.Lock()
	mock.calls.FleetWorkspaces = append(mock.calls.FleetWorkspaces, callInfo)
	mock.lockFleetWorkspaces.Unlock()
	return mock.FleetWorkspacesFunc(namespace)
}

// FleetWorkspacesCalls gets all the calls that were made to FleetWorkspaces.
// Check the length with:
//
//	len(mockedInterface.FleetWorkspacesCalls())
func (mock *InterfaceMock) FleetWorkspacesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockFleetWorkspaces.RLock()
	calls = mock.calls.FleetWorkspaces
	mock.lockFleetWorkspaces.RUnlock()
	return calls
}

// GlobalDnsProviders calls GlobalDnsProvidersFunc.
func (mock *InterfaceMock) GlobalDnsProviders(namespace string) v31.GlobalDnsProviderInterface {
	if mock.GlobalDnsProvidersFunc == nil {
		panic("InterfaceMock.GlobalDnsProvidersFunc: method is nil but Interface.GlobalDnsProviders was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockGlobalDnsProviders.Lock()
	mock.calls.GlobalDnsProviders = append(mock.calls.GlobalDnsProviders, callInfo)
	mock.lockGlobalDnsProviders.Unlock()
	return mock.GlobalDnsProvidersFunc(namespace)
}

// GlobalDnsProvidersCalls gets all the calls that were made to GlobalDnsProviders.
// Check the length with:
//
//	len(mockedInterface.GlobalDnsProvidersCalls())
func (mock *InterfaceMock) GlobalDnsProvidersCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockGlobalDnsProviders.RLock()
	calls = mock.calls.GlobalDnsProviders
	mock.lockGlobalDnsProviders.RUnlock()
	return calls
}

// GlobalDnses calls GlobalDnsesFunc.
func (mock *InterfaceMock) GlobalDnses(namespace string) v31.GlobalDnsInterface {
	if mock.GlobalDnsesFunc == nil {
		panic("InterfaceMock.GlobalDnsesFunc: method is nil but Interface.GlobalDnses was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockGlobalDnses.Lock()
	mock.calls.GlobalDnses = append(mock.calls.GlobalDnses, callInfo)
	mock.lockGlobalDnses.Unlock()
	return mock.GlobalDnsesFunc(namespace)
}

// GlobalDnsesCalls gets all the calls that were made to GlobalDnses.
// Check the length with:
//
//	len(mockedInterface.GlobalDnsesCalls())
func (mock *InterfaceMock) GlobalDnsesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockGlobalDnses.RLock()
	calls = mock.calls.GlobalDnses
	mock.lockGlobalDnses.RUnlock()
	return calls
}

// GlobalRoleBindings calls GlobalRoleBindingsFunc.
func (mock *InterfaceMock) GlobalRoleBindings(namespace string) v31.GlobalRoleBindingInterface {
	if mock.GlobalRoleBindingsFunc == nil {
		panic("InterfaceMock.GlobalRoleBindingsFunc: method is nil but Interface.GlobalRoleBindings was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockGlobalRoleBindings.Lock()
	mock.calls.GlobalRoleBindings = append(mock.calls.GlobalRoleBindings, callInfo)
	mock.lockGlobalRoleBindings.Unlock()
	return mock.GlobalRoleBindingsFunc(namespace)
}

// GlobalRoleBindingsCalls gets all the calls that were made to GlobalRoleBindings.
// Check the length with:
//
//	len(mockedInterface.GlobalRoleBindingsCalls())
func (mock *InterfaceMock) GlobalRoleBindingsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockGlobalRoleBindings.RLock()
	calls = mock.calls.GlobalRoleBindings
	mock.lockGlobalRoleBindings.RUnlock()
	return calls
}

// GlobalRoles calls GlobalRolesFunc.
func (mock *InterfaceMock) GlobalRoles(namespace string) v31.GlobalRoleInterface {
	if mock.GlobalRolesFunc == nil {
		panic("InterfaceMock.GlobalRolesFunc: method is nil but Interface.GlobalRoles was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockGlobalRoles.Lock()
	mock.calls.GlobalRoles = append(mock.calls.GlobalRoles, callInfo)
	mock.lockGlobalRoles.Unlock()
	return mock.GlobalRolesFunc(namespace)
}

// GlobalRolesCalls gets all the calls that were made to GlobalRoles.
// Check the length with:
//
//	len(mockedInterface.GlobalRolesCalls())
func (mock *InterfaceMock) GlobalRolesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockGlobalRoles.RLock()
	calls = mock.calls.GlobalRoles
	mock.lockGlobalRoles.RUnlock()
	return calls
}

// GroupMembers calls GroupMembersFunc.
func (mock *InterfaceMock) GroupMembers(namespace string) v31.GroupMemberInterface {
	if mock.GroupMembersFunc == nil {
		panic("InterfaceMock.GroupMembersFunc: method is nil but Interface.GroupMembers was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockGroupMembers.Lock()
	mock.calls.GroupMembers = append(mock.calls.GroupMembers, callInfo)
	mock.lockGroupMembers.Unlock()
	return mock.GroupMembersFunc(namespace)
}

// GroupMembersCalls gets all the calls that were made to GroupMembers.
// Check the length with:
//
//	len(mockedInterface.GroupMembersCalls())
func (mock *InterfaceMock) GroupMembersCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockGroupMembers.RLock()
	calls = mock.calls.GroupMembers
	mock.lockGroupMembers.RUnlock()
	return calls
}

// Groups calls GroupsFunc.
func (mock *InterfaceMock) Groups(namespace string) v31.GroupInterface {
	if mock.GroupsFunc == nil {
		panic("InterfaceMock.GroupsFunc: method is nil but Interface.Groups was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockGroups.Lock()
	mock.calls.Groups = append(mock.calls.Groups, callInfo)
	mock.lockGroups.Unlock()
	return mock.GroupsFunc(namespace)
}

// GroupsCalls gets all the calls that were made to Groups.
// Check the length with:
//
//	len(mockedInterface.GroupsCalls())
func (mock *InterfaceMock) GroupsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockGroups.RLock()
	calls = mock.calls.Groups
	mock.lockGroups.RUnlock()
	return calls
}

// KontainerDrivers calls KontainerDriversFunc.
func (mock *InterfaceMock) KontainerDrivers(namespace string) v31.KontainerDriverInterface {
	if mock.KontainerDriversFunc == nil {
		panic("InterfaceMock.KontainerDriversFunc: method is nil but Interface.KontainerDrivers was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockKontainerDrivers.Lock()
	mock.calls.KontainerDrivers = append(mock.calls.KontainerDrivers, callInfo)
	mock.lockKontainerDrivers.Unlock()
	return mock.KontainerDriversFunc(namespace)
}

// KontainerDriversCalls gets all the calls that were made to KontainerDrivers.
// Check the length with:
//
//	len(mockedInterface.KontainerDriversCalls())
func (mock *InterfaceMock) KontainerDriversCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockKontainerDrivers.RLock()
	calls = mock.calls.KontainerDrivers
	mock.lockKontainerDrivers.RUnlock()
	return calls
}

// LdapConfigs calls LdapConfigsFunc.
func (mock *InterfaceMock) LdapConfigs(namespace string) v31.LdapConfigInterface {
	if mock.LdapConfigsFunc == nil {
		panic("InterfaceMock.LdapConfigsFunc: method is nil but Interface.LdapConfigs was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockLdapConfigs.Lock()
	mock.calls.LdapConfigs = append(mock.calls.LdapConfigs, callInfo)
	mock.lockLdapConfigs.Unlock()
	return mock.LdapConfigsFunc(namespace)
}

// LdapConfigsCalls gets all the calls that were made to LdapConfigs.
// Check the length with:
//
//	len(mockedInterface.LdapConfigsCalls())
func (mock *InterfaceMock) LdapConfigsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockLdapConfigs.RLock()
	calls = mock.calls.LdapConfigs
	mock.lockLdapConfigs.RUnlock()
	return calls
}

// MultiClusterAppRevisions calls MultiClusterAppRevisionsFunc.
func (mock *InterfaceMock) MultiClusterAppRevisions(namespace string) v31.MultiClusterAppRevisionInterface {
	if mock.MultiClusterAppRevisionsFunc == nil {
		panic("InterfaceMock.MultiClusterAppRevisionsFunc: method is nil but Interface.MultiClusterAppRevisions was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockMultiClusterAppRevisions.Lock()
	mock.calls.MultiClusterAppRevisions = append(mock.calls.MultiClusterAppRevisions, callInfo)
	mock.lockMultiClusterAppRevisions.Unlock()
	return mock.MultiClusterAppRevisionsFunc(namespace)
}

// MultiClusterAppRevisionsCalls gets all the calls that were made to MultiClusterAppRevisions.
// Check the length with:
//
//	len(mockedInterface.MultiClusterAppRevisionsCalls())
func (mock *InterfaceMock) MultiClusterAppRevisionsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockMultiClusterAppRevisions.RLock()
	calls = mock.calls.MultiClusterAppRevisions
	mock.lockMultiClusterAppRevisions.RUnlock()
	return calls
}

// MultiClusterApps calls MultiClusterAppsFunc.
func (mock *InterfaceMock) MultiClusterApps(namespace string) v31.MultiClusterAppInterface {
	if mock.MultiClusterAppsFunc == nil {
		panic("InterfaceMock.MultiClusterAppsFunc: method is nil but Interface.MultiClusterApps was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockMultiClusterApps.Lock()
	mock.calls.MultiClusterApps = append(mock.calls.MultiClusterApps, callInfo)
	mock.lockMultiClusterApps.Unlock()
	return mock.MultiClusterAppsFunc(namespace)
}

// MultiClusterAppsCalls gets all the calls that were made to MultiClusterApps.
// Check the length with:
//
//	len(mockedInterface.MultiClusterAppsCalls())
func (mock *InterfaceMock) MultiClusterAppsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockMultiClusterApps.RLock()
	calls = mock.calls.MultiClusterApps
	mock.lockMultiClusterApps.RUnlock()
	return calls
}

// NodeDrivers calls NodeDriversFunc.
func (mock *InterfaceMock) NodeDrivers(namespace string) v31.NodeDriverInterface {
	if mock.NodeDriversFunc == nil {
		panic("InterfaceMock.NodeDriversFunc: method is nil but Interface.NodeDrivers was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockNodeDrivers.Lock()
	mock.calls.NodeDrivers = append(mock.calls.NodeDrivers, callInfo)
	mock.lockNodeDrivers.Unlock()
	return mock.NodeDriversFunc(namespace)
}

// NodeDriversCalls gets all the calls that were made to NodeDrivers.
// Check the length with:
//
//	len(mockedInterface.NodeDriversCalls())
func (mock *InterfaceMock) NodeDriversCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockNodeDrivers.RLock()
	calls = mock.calls.NodeDrivers
	mock.lockNodeDrivers.RUnlock()
	return calls
}

// NodePools calls NodePoolsFunc.
func (mock *InterfaceMock) NodePools(namespace string) v31.NodePoolInterface {
	if mock.NodePoolsFunc == nil {
		panic("InterfaceMock.NodePoolsFunc: method is nil but Interface.NodePools was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockNodePools.Lock()
	mock.calls.NodePools = append(mock.calls.NodePools, callInfo)
	mock.lockNodePools.Unlock()
	return mock.NodePoolsFunc(namespace)
}

// NodePoolsCalls gets all the calls that were made to NodePools.
// Check the length with:
//
//	len(mockedInterface.NodePoolsCalls())
func (mock *InterfaceMock) NodePoolsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockNodePools.RLock()
	calls = mock.calls.NodePools
	mock.lockNodePools.RUnlock()
	return calls
}

// NodeTemplates calls NodeTemplatesFunc.
func (mock *InterfaceMock) NodeTemplates(namespace string) v31.NodeTemplateInterface {
	if mock.NodeTemplatesFunc == nil {
		panic("InterfaceMock.NodeTemplatesFunc: method is nil but Interface.NodeTemplates was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockNodeTemplates.Lock()
	mock.calls.NodeTemplates = append(mock.calls.NodeTemplates, callInfo)
	mock.lockNodeTemplates.Unlock()
	return mock.NodeTemplatesFunc(namespace)
}

// NodeTemplatesCalls gets all the calls that were made to NodeTemplates.
// Check the length with:
//
//	len(mockedInterface.NodeTemplatesCalls())
func (mock *InterfaceMock) NodeTemplatesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockNodeTemplates.RLock()
	calls = mock.calls.NodeTemplates
	mock.lockNodeTemplates.RUnlock()
	return calls
}

// Nodes calls NodesFunc.
func (mock *InterfaceMock) Nodes(namespace string) v31.NodeInterface {
	if mock.NodesFunc == nil {
		panic("InterfaceMock.NodesFunc: method is nil but Interface.Nodes was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockNodes.Lock()
	mock.calls.Nodes = append(mock.calls.Nodes, callInfo)
	mock.lockNodes.Unlock()
	return mock.NodesFunc(namespace)
}

// NodesCalls gets all the calls that were made to Nodes.
// Check the length with:
//
//	len(mockedInterface.NodesCalls())
func (mock *InterfaceMock) NodesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockNodes.RLock()
	calls = mock.calls.Nodes
	mock.lockNodes.RUnlock()
	return calls
}

// PodSecurityAdmissionConfigurationTemplates calls PodSecurityAdmissionConfigurationTemplatesFunc.
func (mock *InterfaceMock) PodSecurityAdmissionConfigurationTemplates(namespace string) v31.PodSecurityAdmissionConfigurationTemplateInterface {
	if mock.PodSecurityAdmissionConfigurationTemplatesFunc == nil {
		panic("InterfaceMock.PodSecurityAdmissionConfigurationTemplatesFunc: method is nil but Interface.PodSecurityAdmissionConfigurationTemplates was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockPodSecurityAdmissionConfigurationTemplates.Lock()
	mock.calls.PodSecurityAdmissionConfigurationTemplates = append(mock.calls.PodSecurityAdmissionConfigurationTemplates, callInfo)
	mock.lockPodSecurityAdmissionConfigurationTemplates.Unlock()
	return mock.PodSecurityAdmissionConfigurationTemplatesFunc(namespace)
}

// PodSecurityAdmissionConfigurationTemplatesCalls gets all the calls that were made to PodSecurityAdmissionConfigurationTemplates.
// Check the length with:
//
//	len(mockedInterface.PodSecurityAdmissionConfigurationTemplatesCalls())
func (mock *InterfaceMock) PodSecurityAdmissionConfigurationTemplatesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockPodSecurityAdmissionConfigurationTemplates.RLock()
	calls = mock.calls.PodSecurityAdmissionConfigurationTemplates
	mock.lockPodSecurityAdmissionConfigurationTemplates.RUnlock()
	return calls
}

// Preferences calls PreferencesFunc.
func (mock *InterfaceMock) Preferences(namespace string) v31.PreferenceInterface {
	if mock.PreferencesFunc == nil {
		panic("InterfaceMock.PreferencesFunc: method is nil but Interface.Preferences was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockPreferences.Lock()
	mock.calls.Preferences = append(mock.calls.Preferences, callInfo)
	mock.lockPreferences.Unlock()
	return mock.PreferencesFunc(namespace)
}

// PreferencesCalls gets all the calls that were made to Preferences.
// Check the length with:
//
//	len(mockedInterface.PreferencesCalls())
func (mock *InterfaceMock) PreferencesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockPreferences.RLock()
	calls = mock.calls.Preferences
	mock.lockPreferences.RUnlock()
	return calls
}

// Principals calls PrincipalsFunc.
func (mock *InterfaceMock) Principals(namespace string) v31.PrincipalInterface {
	if mock.PrincipalsFunc == nil {
		panic("InterfaceMock.PrincipalsFunc: method is nil but Interface.Principals was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockPrincipals.Lock()
	mock.calls.Principals = append(mock.calls.Principals, callInfo)
	mock.lockPrincipals.Unlock()
	return mock.PrincipalsFunc(namespace)
}

// PrincipalsCalls gets all the calls that were made to Principals.
// Check the length with:
//
//	len(mockedInterface.PrincipalsCalls())
func (mock *InterfaceMock) PrincipalsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockPrincipals.RLock()
	calls = mock.calls.Principals
	mock.lockPrincipals.RUnlock()
	return calls
}

// ProjectCatalogs calls ProjectCatalogsFunc.
func (mock *InterfaceMock) ProjectCatalogs(namespace string) v31.ProjectCatalogInterface {
	if mock.ProjectCatalogsFunc == nil {
		panic("InterfaceMock.ProjectCatalogsFunc: method is nil but Interface.ProjectCatalogs was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockProjectCatalogs.Lock()
	mock.calls.ProjectCatalogs = append(mock.calls.ProjectCatalogs, callInfo)
	mock.lockProjectCatalogs.Unlock()
	return mock.ProjectCatalogsFunc(namespace)
}

// ProjectCatalogsCalls gets all the calls that were made to ProjectCatalogs.
// Check the length with:
//
//	len(mockedInterface.ProjectCatalogsCalls())
func (mock *InterfaceMock) ProjectCatalogsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockProjectCatalogs.RLock()
	calls = mock.calls.ProjectCatalogs
	mock.lockProjectCatalogs.RUnlock()
	return calls
}

// ProjectNetworkPolicies calls ProjectNetworkPoliciesFunc.
func (mock *InterfaceMock) ProjectNetworkPolicies(namespace string) v31.ProjectNetworkPolicyInterface {
	if mock.ProjectNetworkPoliciesFunc == nil {
		panic("InterfaceMock.ProjectNetworkPoliciesFunc: method is nil but Interface.ProjectNetworkPolicies was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockProjectNetworkPolicies.Lock()
	mock.calls.ProjectNetworkPolicies = append(mock.calls.ProjectNetworkPolicies, callInfo)
	mock.lockProjectNetworkPolicies.Unlock()
	return mock.ProjectNetworkPoliciesFunc(namespace)
}

// ProjectNetworkPoliciesCalls gets all the calls that were made to ProjectNetworkPolicies.
// Check the length with:
//
//	len(mockedInterface.ProjectNetworkPoliciesCalls())
func (mock *InterfaceMock) ProjectNetworkPoliciesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockProjectNetworkPolicies.RLock()
	calls = mock.calls.ProjectNetworkPolicies
	mock.lockProjectNetworkPolicies.RUnlock()
	return calls
}

// ProjectRoleTemplateBindings calls ProjectRoleTemplateBindingsFunc.
func (mock *InterfaceMock) ProjectRoleTemplateBindings(namespace string) v31.ProjectRoleTemplateBindingInterface {
	if mock.ProjectRoleTemplateBindingsFunc == nil {
		panic("InterfaceMock.ProjectRoleTemplateBindingsFunc: method is nil but Interface.ProjectRoleTemplateBindings was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockProjectRoleTemplateBindings.Lock()
	mock.calls.ProjectRoleTemplateBindings = append(mock.calls.ProjectRoleTemplateBindings, callInfo)
	mock.lockProjectRoleTemplateBindings.Unlock()
	return mock.ProjectRoleTemplateBindingsFunc(namespace)
}

// ProjectRoleTemplateBindingsCalls gets all the calls that were made to ProjectRoleTemplateBindings.
// Check the length with:
//
//	len(mockedInterface.ProjectRoleTemplateBindingsCalls())
func (mock *InterfaceMock) ProjectRoleTemplateBindingsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockProjectRoleTemplateBindings.RLock()
	calls = mock.calls.ProjectRoleTemplateBindings
	mock.lockProjectRoleTemplateBindings.RUnlock()
	return calls
}

// Projects calls ProjectsFunc.
func (mock *InterfaceMock) Projects(namespace string) v31.ProjectInterface {
	if mock.ProjectsFunc == nil {
		panic("InterfaceMock.ProjectsFunc: method is nil but Interface.Projects was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockProjects.Lock()
	mock.calls.Projects = append(mock.calls.Projects, callInfo)
	mock.lockProjects.Unlock()
	return mock.ProjectsFunc(namespace)
}

// ProjectsCalls gets all the calls that were made to Projects.
// Check the length with:
//
//	len(mockedInterface.ProjectsCalls())
func (mock *InterfaceMock) ProjectsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockProjects.RLock()
	calls = mock.calls.Projects
	mock.lockProjects.RUnlock()
	return calls
}

// RancherUserNotifications calls RancherUserNotificationsFunc.
func (mock *InterfaceMock) RancherUserNotifications(namespace string) v31.RancherUserNotificationInterface {
	if mock.RancherUserNotificationsFunc == nil {
		panic("InterfaceMock.RancherUserNotificationsFunc: method is nil but Interface.RancherUserNotifications was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockRancherUserNotifications.Lock()
	mock.calls.RancherUserNotifications = append(mock.calls.RancherUserNotifications, callInfo)
	mock.lockRancherUserNotifications.Unlock()
	return mock.RancherUserNotificationsFunc(namespace)
}

// RancherUserNotificationsCalls gets all the calls that were made to RancherUserNotifications.
// Check the length with:
//
//	len(mockedInterface.RancherUserNotificationsCalls())
func (mock *InterfaceMock) RancherUserNotificationsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockRancherUserNotifications.RLock()
	calls = mock.calls.RancherUserNotifications
	mock.lockRancherUserNotifications.RUnlock()
	return calls
}

// RkeAddons calls RkeAddonsFunc.
func (mock *InterfaceMock) RkeAddons(namespace string) v31.RkeAddonInterface {
	if mock.RkeAddonsFunc == nil {
		panic("InterfaceMock.RkeAddonsFunc: method is nil but Interface.RkeAddons was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockRkeAddons.Lock()
	mock.calls.RkeAddons = append(mock.calls.RkeAddons, callInfo)
	mock.lockRkeAddons.Unlock()
	return mock.RkeAddonsFunc(namespace)
}

// RkeAddonsCalls gets all the calls that were made to RkeAddons.
// Check the length with:
//
//	len(mockedInterface.RkeAddonsCalls())
func (mock *InterfaceMock) RkeAddonsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockRkeAddons.RLock()
	calls = mock.calls.RkeAddons
	mock.lockRkeAddons.RUnlock()
	return calls
}

// RkeK8sServiceOptions calls RkeK8sServiceOptionsFunc.
func (mock *InterfaceMock) RkeK8sServiceOptions(namespace string) v31.RkeK8sServiceOptionInterface {
	if mock.RkeK8sServiceOptionsFunc == nil {
		panic("InterfaceMock.RkeK8sServiceOptionsFunc: method is nil but Interface.RkeK8sServiceOptions was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockRkeK8sServiceOptions.Lock()
	mock.calls.RkeK8sServiceOptions = append(mock.calls.RkeK8sServiceOptions, callInfo)
	mock.lockRkeK8sServiceOptions.Unlock()
	return mock.RkeK8sServiceOptionsFunc(namespace)
}

// RkeK8sServiceOptionsCalls gets all the calls that were made to RkeK8sServiceOptions.
// Check the length with:
//
//	len(mockedInterface.RkeK8sServiceOptionsCalls())
func (mock *InterfaceMock) RkeK8sServiceOptionsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockRkeK8sServiceOptions.RLock()
	calls = mock.calls.RkeK8sServiceOptions
	mock.lockRkeK8sServiceOptions.RUnlock()
	return calls
}

// RkeK8sSystemImages calls RkeK8sSystemImagesFunc.
func (mock *InterfaceMock) RkeK8sSystemImages(namespace string) v31.RkeK8sSystemImageInterface {
	if mock.RkeK8sSystemImagesFunc == nil {
		panic("InterfaceMock.RkeK8sSystemImagesFunc: method is nil but Interface.RkeK8sSystemImages was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockRkeK8sSystemImages.Lock()
	mock.calls.RkeK8sSystemImages = append(mock.calls.RkeK8sSystemImages, callInfo)
	mock.lockRkeK8sSystemImages.Unlock()
	return mock.RkeK8sSystemImagesFunc(namespace)
}

// RkeK8sSystemImagesCalls gets all the calls that were made to RkeK8sSystemImages.
// Check the length with:
//
//	len(mockedInterface.RkeK8sSystemImagesCalls())
func (mock *InterfaceMock) RkeK8sSystemImagesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockRkeK8sSystemImages.RLock()
	calls = mock.calls.RkeK8sSystemImages
	mock.lockRkeK8sSystemImages.RUnlock()
	return calls
}

// RoleTemplates calls RoleTemplatesFunc.
func (mock *InterfaceMock) RoleTemplates(namespace string) v31.RoleTemplateInterface {
	if mock.RoleTemplatesFunc == nil {
		panic("InterfaceMock.RoleTemplatesFunc: method is nil but Interface.RoleTemplates was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockRoleTemplates.Lock()
	mock.calls.RoleTemplates = append(mock.calls.RoleTemplates, callInfo)
	mock.lockRoleTemplates.Unlock()
	return mock.RoleTemplatesFunc(namespace)
}

// RoleTemplatesCalls gets all the calls that were made to RoleTemplates.
// Check the length with:
//
//	len(mockedInterface.RoleTemplatesCalls())
func (mock *InterfaceMock) RoleTemplatesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockRoleTemplates.RLock()
	calls = mock.calls.RoleTemplates
	mock.lockRoleTemplates.RUnlock()
	return calls
}

// SamlTokens calls SamlTokensFunc.
func (mock *InterfaceMock) SamlTokens(namespace string) v31.SamlTokenInterface {
	if mock.SamlTokensFunc == nil {
		panic("InterfaceMock.SamlTokensFunc: method is nil but Interface.SamlTokens was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockSamlTokens.Lock()
	mock.calls.SamlTokens = append(mock.calls.SamlTokens, callInfo)
	mock.lockSamlTokens.Unlock()
	return mock.SamlTokensFunc(namespace)
}

// SamlTokensCalls gets all the calls that were made to SamlTokens.
// Check the length with:
//
//	len(mockedInterface.SamlTokensCalls())
func (mock *InterfaceMock) SamlTokensCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockSamlTokens.RLock()
	calls = mock.calls.SamlTokens
	mock.lockSamlTokens.RUnlock()
	return calls
}

// Settings calls SettingsFunc.
func (mock *InterfaceMock) Settings(namespace string) v31.SettingInterface {
	if mock.SettingsFunc == nil {
		panic("InterfaceMock.SettingsFunc: method is nil but Interface.Settings was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockSettings.Lock()
	mock.calls.Settings = append(mock.calls.Settings, callInfo)
	mock.lockSettings.Unlock()
	return mock.SettingsFunc(namespace)
}

// SettingsCalls gets all the calls that were made to Settings.
// Check the length with:
//
//	len(mockedInterface.SettingsCalls())
func (mock *InterfaceMock) SettingsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockSettings.RLock()
	calls = mock.calls.Settings
	mock.lockSettings.RUnlock()
	return calls
}

// TemplateContents calls TemplateContentsFunc.
func (mock *InterfaceMock) TemplateContents(namespace string) v31.TemplateContentInterface {
	if mock.TemplateContentsFunc == nil {
		panic("InterfaceMock.TemplateContentsFunc: method is nil but Interface.TemplateContents was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockTemplateContents.Lock()
	mock.calls.TemplateContents = append(mock.calls.TemplateContents, callInfo)
	mock.lockTemplateContents.Unlock()
	return mock.TemplateContentsFunc(namespace)
}

// TemplateContentsCalls gets all the calls that were made to TemplateContents.
// Check the length with:
//
//	len(mockedInterface.TemplateContentsCalls())
func (mock *InterfaceMock) TemplateContentsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockTemplateContents.RLock()
	calls = mock.calls.TemplateContents
	mock.lockTemplateContents.RUnlock()
	return calls
}

// TemplateVersions calls TemplateVersionsFunc.
func (mock *InterfaceMock) TemplateVersions(namespace string) v31.TemplateVersionInterface {
	if mock.TemplateVersionsFunc == nil {
		panic("InterfaceMock.TemplateVersionsFunc: method is nil but Interface.TemplateVersions was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockTemplateVersions.Lock()
	mock.calls.TemplateVersions = append(mock.calls.TemplateVersions, callInfo)
	mock.lockTemplateVersions.Unlock()
	return mock.TemplateVersionsFunc(namespace)
}

// TemplateVersionsCalls gets all the calls that were made to TemplateVersions.
// Check the length with:
//
//	len(mockedInterface.TemplateVersionsCalls())
func (mock *InterfaceMock) TemplateVersionsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockTemplateVersions.RLock()
	calls = mock.calls.TemplateVersions
	mock.lockTemplateVersions.RUnlock()
	return calls
}

// Templates calls TemplatesFunc.
func (mock *InterfaceMock) Templates(namespace string) v31.TemplateInterface {
	if mock.TemplatesFunc == nil {
		panic("InterfaceMock.TemplatesFunc: method is nil but Interface.Templates was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockTemplates.Lock()
	mock.calls.Templates = append(mock.calls.Templates, callInfo)
	mock.lockTemplates.Unlock()
	return mock.TemplatesFunc(namespace)
}

// TemplatesCalls gets all the calls that were made to Templates.
// Check the length with:
//
//	len(mockedInterface.TemplatesCalls())
func (mock *InterfaceMock) TemplatesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockTemplates.RLock()
	calls = mock.calls.Templates
	mock.lockTemplates.RUnlock()
	return calls
}

// Tokens calls TokensFunc.
func (mock *InterfaceMock) Tokens(namespace string) v31.TokenInterface {
	if mock.TokensFunc == nil {
		panic("InterfaceMock.TokensFunc: method is nil but Interface.Tokens was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockTokens.Lock()
	mock.calls.Tokens = append(mock.calls.Tokens, callInfo)
	mock.lockTokens.Unlock()
	return mock.TokensFunc(namespace)
}

// TokensCalls gets all the calls that were made to Tokens.
// Check the length with:
//
//	len(mockedInterface.TokensCalls())
func (mock *InterfaceMock) TokensCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockTokens.RLock()
	calls = mock.calls.Tokens
	mock.lockTokens.RUnlock()
	return calls
}

// UserAttributes calls UserAttributesFunc.
func (mock *InterfaceMock) UserAttributes(namespace string) v31.UserAttributeInterface {
	if mock.UserAttributesFunc == nil {
		panic("InterfaceMock.UserAttributesFunc: method is nil but Interface.UserAttributes was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockUserAttributes.Lock()
	mock.calls.UserAttributes = append(mock.calls.UserAttributes, callInfo)
	mock.lockUserAttributes.Unlock()
	return mock.UserAttributesFunc(namespace)
}

// UserAttributesCalls gets all the calls that were made to UserAttributes.
// Check the length with:
//
//	len(mockedInterface.UserAttributesCalls())
func (mock *InterfaceMock) UserAttributesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockUserAttributes.RLock()
	calls = mock.calls.UserAttributes
	mock.lockUserAttributes.RUnlock()
	return calls
}

// Users calls UsersFunc.
func (mock *InterfaceMock) Users(namespace string) v31.UserInterface {
	if mock.UsersFunc == nil {
		panic("InterfaceMock.UsersFunc: method is nil but Interface.Users was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockUsers.Lock()
	mock.calls.Users = append(mock.calls.Users, callInfo)
	mock.lockUsers.Unlock()
	return mock.UsersFunc(namespace)
}

// UsersCalls gets all the calls that were made to Users.
// Check the length with:
//
//	len(mockedInterface.UsersCalls())
func (mock *InterfaceMock) UsersCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockUsers.RLock()
	calls = mock.calls.Users
	mock.lockUsers.RUnlock()
	return calls
}
